name: Build Release

on:
  push:
    branches: [ "pipeline-wrong-compiler-fix" ]
  pull_request:
    branches: [ "pipeline-wrong-compiler-fix" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: |
          ${{ secrets.LIBARTBASE_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBARTPALETTE_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBBASE_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBCUTILS_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBDEXFILE_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBLOG_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBSYSTEM_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBTINYXML2_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBUNWINDSTACK_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBUTILS_PRIVATE_SSH_KEY }}
          ${{ secrets.LIBZIPARCHIVE_PRIVATE_SSH_KEY }}
          ${{ secrets.LZMA_PRIVATE_SSH_KEY }}
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.0
    - name: Cache Conan Packages
      id: conan-aarch64-cache
      uses: actions/cache@v3
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-aarch64-conanpackages-${{ hashFiles('./build/aarch64/conanfile.txt') }}
    - name: Create AARCH64 Build Directory
      run: mkdir ./build/aarch64/cmake-build-release
    - name: Run Conan for AARCH64
      working-directory: ./build/aarch64/cmake-build-release
      run: export CC=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang && export CXX=$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang++ && conan install ../conanfile.txt --profile:build default --profile:host ../armv8.profile --build missing
    - name: Run CMake for AARCH64
      working-directory: ./build/aarch64/cmake-build-release
      run: cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
    - name: Make for AARCH64
      working-directory: ./build/aarch64/cmake-build-release
      run: make
    - name: Create release for AARCH64
      id: create-release-aarch64
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ptracer-snapshot-${{ github.sha }}
        release_name: Release Ptracer-SNAPSHOT-${{ github.sha }}
        body: |
          Run number: ${{ github.run_number }}
          Git reference: ${{ github.ref }}
          Commit Hash: ${{ github.sha }}
        draft: false
        prerelease: true
    - name: Upload Release for AARCH64 - Executable
      id: upload-release-aarch64-exe
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release-aarch64.outputs.upload_url }}
        asset_path: ./build/aarch64/cmake-build-release/bin/ptracer
        asset_name: ptracer
        asset_content_type: application/x-elf
#    - name: conan-x86
#      run: cd - && mkdir ./build/x86_64/cmake-build-release && cd ./build/x86_64/cmake-build-release && conan install ../conanfile.txt --profile:build ../build.profile --profile:host ../armv8.profile
#    - name: cmake-x86
#      run: cmake .. -DCMAKE_BUILD_TYPE=Release
#    - name: make-x86
#      run: make
